searchState.loadedDescShard("connectorx", 0, "ConnectorX\nThis module provides two data orders: row-wise and …\nThis module defines three traits <code>Destination</code>, …\nA macro to help define a Transport.\nAssociate physical representations to a typesystem.\nThis module defines four traits <code>Source</code>, <code>SourcePartition</code>, …\nThis module contains transport definitions for the sources …\nThis module defines traits that required to define a …\nThe iterator that returns arrow in <code>RecordBatch</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert an iterator of anything into <code>FallibleIterator</code> by …\nNOTE: not thread safe\nConvert an iterator of <code>Result</code>s into <code>FallibleIterator</code> by …\nGiven the supported data order from source and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA type implemented <code>Consume&lt;T&gt;</code> means that it can consume a …\nA <code>Destination</code> is associated with a <code>TypeSystem</code> and a …\n<code>PartitionDestination</code> writes values to its own region. …\nConstruct the <code>Destination</code>. This allocates the memory based …\nAquire n rows in final destination\nDestination implementation for Arrow and Polars.\nDestination implementation for Arrow2.\nDestination implementation for Arrow and Polars.\nFinal clean ups\nNumber of rows this <code>PartitionDestination</code> controls.\nSpecify whether the destination needs total rows in advance\nCreate a bunch of partition destinations, with each write …\nReturn the schema of the destination.\nWrite a value of type T to the location (row, col). If T …\nContains the error value\nContains the success value\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nContains the error value\nContains the success value\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nErrors that can be raised from this library.\nContains the error value\nContains the error value\nContains the success value\nContains the success value\nAny other errors that are too trivial to be put here …\nThe required type does not same as the schema defined.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA dispatcher takes a <code>S: Source</code>, a <code>D: Destination</code>, a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nOnly fetch the metadata (header) of the destination.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new dispatcher by providing a source, a …\nStart the data loading process.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSupported data orders, ordering by preference.\nA type implemented <code>Produce&lt;T&gt;</code> means that it can produce a …\nIn general, a <code>DataSource</code> abstracts the data source as a …\nThe type system this <code>Source</code> associated with.\nSource implementation for Google BigQuery\nSource implementation for CSV files.\nA dummy source that generates different values based on an …\nFetch next batch of rows from database, return (number of …\nSource implementation for SQL Server.\nSource implementation for MySQL database.\nNumber of cols this <code>DataSource</code> got.\nNumber of rows this <code>DataSource</code> got. Sometimes it is not …\nRead a value <code>T</code> by calling <code>Produce&lt;T&gt;::produce</code>. Usually …\nSource implementation for Postgres database, including the …\nGet total number of rows if available\nCount total number of rows in each partition.\nSource implementation for SQLite embedded database.\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is a dummy type system used in this library. For all …\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe parameter <code>query</code> is the path of the csv file\nThis is a dummy type system used in this library. For all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProtocol - Binary based bulk load\nProtocol - CSV based bulk load\nProtocol - use Cursor\nAny other errors that are too trivial to be put here …\nProtocol - use Simple Query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny other errors that are too trivial to be put here …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvert BigQuery data types to Arrow data types.\nConvert BigQuery data types to Arrow data types.\nConvert BigQuery data types to Arrow data types.\nConvert CSV data types to Arrow data types.\nConvert Dummy data types to Arrow2 data types.\nConvert Dummy data types to Arrow data types.\nConvert MsSQL data types to Arrow2 data types.\nConvert MsSQL data types to Arrow data types.\nConvert MsSQL data types to Arrow data types.\nConvert MySQL data types to Arrow2 data types.\nConvert MySQL data types to Arrow data types.\nConvert MySQL data types to Arrow data types.\nConvert Postgres data types to Arrow2 data types.\nConvert Postgres data types to Arrow data types.\nConvert Postgres data types to Arrow data types.\nConvert SQLite data types to Arrow2 data types.\nConvert SQLite data types to Arrow data types.\nConvert SQLite data types to Arrow data types.\nConvert Trino data types to Arrow2 data types.\nConvert Trino data types to Arrow data types.\nConvert Trino data types to Arrow data types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransport asks the source to produce a value, do type …\nDefines a rule to convert a type <code>T</code> to a type <code>U</code>.\nconvert_type convert the type T1 associated with the …\nconvert_typesystem convert the source type system TSS to …\n<code>process</code> will ask source to produce a value with type T1, …")